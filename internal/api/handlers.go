package api

import (
	"errors"
	"net/http"
	"strconv"

	"github.com/auliayudha/oapi-sample/internal/gen"
	"github.com/auliayudha/oapi-sample/internal/repository"
	"github.com/labstack/echo/v4"
)

// UserHandler implements the ServerInterface generated by oapi-codegen
type UserHandler struct {
	repo *repository.UserRepository
}

// NewUserHandler creates a new handler with the given repository
func NewUserHandler(repo *repository.UserRepository) *UserHandler {
	return &UserHandler{
		repo: repo,
	}
}

// ListUsers returns all users
func (h *UserHandler) ListUsers(ctx echo.Context) error {
	users, err := h.repo.List(ctx.Request().Context())
	if err != nil {
		return echo.NewHTTPError(http.StatusInternalServerError, &gen.Error{
			Message: "Failed to fetch users",
		})
	}

	return ctx.JSON(http.StatusOK, users)
}

// GetUser returns a single user by ID
func (h *UserHandler) GetUser(ctx echo.Context, id int64) error {
	user, err := h.repo.Get(ctx.Request().Context(), id)
	if err != nil {
		if errors.Is(err, repository.ErrNotFound) {
			return echo.NewHTTPError(http.StatusNotFound, &gen.Error{
				Message: "User not found",
			})
		}
		return echo.NewHTTPError(http.StatusInternalServerError, &gen.Error{
			Message: "Failed to get user",
		})
	}

	return ctx.JSON(http.StatusOK, user)
}

// CreateUser adds a new user
func (h *UserHandler) CreateUser(ctx echo.Context) error {
	var req gen.UserRequest
	if err := ctx.Bind(&req); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, &gen.Error{
			Message: "Invalid request format",
		})
	}

	// Validate request
	if req.Name == "" || req.Email == "" {
		return echo.NewHTTPError(http.StatusBadRequest, &gen.Error{
			Message: "Name and email are required",
		})
	}

	user, err := h.repo.Create(ctx.Request().Context(), req)
	if err != nil {
		return echo.NewHTTPError(http.StatusInternalServerError, &gen.Error{
			Message: "Failed to create user",
		})
	}

	return ctx.JSON(http.StatusCreated, user)
}

// UpdateUser modifies an existing user
func (h *UserHandler) UpdateUser(ctx echo.Context, id int64) error {
	var req gen.UserRequest
	if err := ctx.Bind(&req); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, &gen.Error{
			Message: "Invalid request format",
		})
	}

	// Validate request
	if req.Name == "" || req.Email == "" {
		return echo.NewHTTPError(http.StatusBadRequest, &gen.Error{
			Message: "Name and email are required",
		})
	}

	user, err := h.repo.Update(ctx.Request().Context(), id, req)
	if err != nil {
		if errors.Is(err, repository.ErrNotFound) {
			return echo.NewHTTPError(http.StatusNotFound, &gen.Error{
				Message: "User not found",
			})
		}
		return echo.NewHTTPError(http.StatusInternalServerError, &gen.Error{
			Message: "Failed to update user",
		})
	}

	return ctx.JSON(http.StatusOK, user)
}

// DeleteUser removes a user by ID
func (h *UserHandler) DeleteUser(ctx echo.Context, id int64) error {
	err := h.repo.Delete(ctx.Request().Context(), id)
	if err != nil {
		if errors.Is(err, repository.ErrNotFound) {
			return echo.NewHTTPError(http.StatusNotFound, &gen.Error{
				Message: "User not found",
			})
		}
		return echo.NewHTTPError(http.StatusInternalServerError, &gen.Error{
			Message: "Failed to delete user",
		})
	}

	return ctx.NoContent(http.StatusNoContent)
}
